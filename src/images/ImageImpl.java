package images;

import java.util.Optional;

import utils.ImageUtilities;

/**
 * An implementation of image interface.
 */
public class ImageImpl implements Image {
  private final int width;
  private final int height;
  private Pixel[][] pixels;

  /**
   * Constructs image from the raw 3D array generated by ImageUtilities.
   *
   * @param rawData 3D array of rows. columns and channels.
   */
  public ImageImpl(int[][][] rawData) {
    if (rawData == null) {
      throw new IllegalArgumentException("Raw data cannot be null");
    }

    if (rawData.length == 0 || rawData[0].length == 0 || rawData[0][0].length != 3) {
      throw new IllegalArgumentException("The size of raw data is invalid: row and column number"
              + " must be greater than zero and channel size has to be 3.");
    }
    this.height = rawData.length;
    this.width = rawData[0].length;
    this.pixels = new Pixel[this.height][this.width];

    for (int i = 0; i < this.height; i++) {
      for (int j = 0; j < this.width; j++) {
        pixels[i][j] = new PixelImpl(rawData[i][j][0], rawData[i][j][1], rawData[i][j][2]);
      }
    }
  }

  /**
   * Constructs the image from a pixel 2D array.
   *
   * @param pixels 2D array of pixels
   */
  public ImageImpl(Pixel[][] pixels) {
    if (pixels == null) {
      throw new IllegalArgumentException("Pixel array cannot be null");
    }
    if (pixels.length == 0 || pixels[0].length == 0) {
      throw new IllegalArgumentException("The size of pixels array is invalid");
    }

    this.height = pixels.length;
    this.width = pixels[0].length;
    this.pixels = pixels;
  }

  @Override
  public int getWidth() {
    return this.width;
  }

  @Override
  public int getHeight() {
    return this.height;
  }

  @Override
  public Optional<Pixel> getElementAt(int row, int col) {
    if (col < 0 || col >= getWidth() || row < 0 || row >= getHeight()) {
      return Optional.empty();
    }
    return Optional.of(pixels[row][col]);
  }

  @Override
  public int[][][] toArray() {
    int[][][] array = new int[this.height][this.width][3];

    for (int i = 0; i < this.height; i++) {
      for (int j = 0; j < this.width; j++) {
        array[i][j][0] = pixels[i][j].getRed();
        array[i][j][1] = pixels[i][j].getGreen();
        array[i][j][2] = pixels[i][j].getBlue();
      }
    }
    return array;
  }
}
